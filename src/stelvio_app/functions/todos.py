# pyright: reportUnknownMemberType=false, reportUnknownArgumentType=false, reportDeprecated=false, reportUnusedParameter=false

"""Lambda handlers for working with todo items."""

import json
from datetime import datetime, timezone
from typing import TYPE_CHECKING, Any

import boto3
from boto3.dynamodb.conditions import Key

if TYPE_CHECKING:
    from dataclasses import dataclass

    @dataclass
    class Resources:  # pragma: no cover - used for type checking only
        """Type definition for dependency-injected resources."""

        todos: Any
else:  # pragma: no cover - executed in runtime where module is generated
    from stlv_resources import Resources  # Auto-generated by Stelvio

dynamodb = boto3.resource("dynamodb")
table = dynamodb.Table(Resources.todos.table_name)


def post(event: dict[str, Any], _context: object) -> dict[str, Any]:
    """Create a new todo item."""
    body = json.loads(event.get("body", "{}"))

    item = {
        "username": body.get("username"),
        "created": datetime.now(tz=timezone.utc).isoformat(),
        "title": body.get("title"),
        "done": False,
    }
    table.put_item(Item=item)
    return {"statusCode": 201, "body": json.dumps(item)}


def get(event: dict[str, Any], _context: object) -> dict[str, Any]:
    """Return todos for the specified user."""
    username = event.get("pathParameters", {}).get("username")

    response = table.query(KeyConditionExpression=Key("username").eq(username))

    return {"statusCode": 200, "body": json.dumps({"todos": response["Items"]})}
